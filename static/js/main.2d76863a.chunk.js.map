{"version":3,"sources":["slices/comics.js","features/comicsList/GridDisplay.js","features/comicsList/ListDisplay.js","features/comicsList/Container.js","slices/comic.js","features/comicDetails/ComicDetail.js","features/comicDetails/Container.js","helpers/urlUtils.js","app/Route.js","slices/index.js","app/store.js","App.js","serviceWorker.js","index.js"],"names":["comicsSlice","createSlice","name","initialState","loading","hasErrors","comics","reducers","getComics","state","getComicsSuccess","payload","getComicsFailure","actions","comicsSelector","Container","styled","div","ComicInfo","DateText","p","Img","img","Grid","Row","Col","Link","GridDisplay","props","useSelector","map","comic","to","id","key","size","src","image","original_url","alt","volume","issue_number","match","date_added","span","expand","media","xs","styles","collapse","ListDisplay","format","ContainerView","Header","Title","h1","Menu","DisplayType","List","SpanText","active","LoadingComponent","React","useState","typeOfView","setTypeOfView","handleIconColor","typeOfComponent","dispatch","useDispatch","useEffect","a","fetch","proxyurl","response","ok","json","data","results","Error","console","log","message","onClick","icon","faList","color","faTh","faSpinner","spin","comicSlice","characters","teams","locations","concepts","getComic","getComicSuccess","getComicFailure","setCharacters","setTeams","setLocations","setConcepts","comicSelector","ImgWrapper","ImgTiny","DetailTitle","h2","Details","Cover","ItemWrapper","ComicDetail","length","character","index","tiny_url","team","location","concept","comicPathId","window","pathname","split","filter","el","pop","mapCredits","myArray","promises","myValue","api_detail_url","resValue","dataFromArray","Promise","all","character_credits","then","team_credits","location_credits","concept_credits","App","basename","path","rootReducer","combineReducers","comicsReducer","comicReducer","store","configureStore","reducer","Route","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2d76863a.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport const initialState = {\r\n  loading: false,\r\n  hasErrors: false,\r\n  comics: [],\r\n}\r\n\r\n// A slice for comics with our three reducers\r\nconst comicsSlice = createSlice({\r\n  name: 'comics',\r\n  initialState,\r\n  reducers: {\r\n    getComics: state => {\r\n      state.loading = true\r\n    },\r\n    getComicsSuccess: (state, { payload }) => {\r\n      state.comics = payload\r\n      state.loading = false\r\n      state.hasErrors = false\r\n    },\r\n    getComicsFailure: state => {\r\n      state.loading = false\r\n      state.hasErrors = true\r\n    },\r\n  },\r\n})\r\n\r\n// Three actions generated from the slice\r\nexport const { getComics, getComicsSuccess, getComicsFailure } = comicsSlice.actions\r\n\r\n// A selector\r\nexport const comicsSelector = state => state.comics\r\n\r\n// The reducer\r\nexport default comicsSlice.reducer\r\n\r\n// Asynchronous thunk action defined by the first argument\r\nexport function fetchComics() {\r\n  return async dispatch => {\r\n    dispatch(getComics())\r\n\r\n    try {\r\n      //const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n      //const proxyurl = \"https://whispering-peak-56582.herokuapp.com/\";\r\n      const proxyurl = \"https://lit-badlands-08756.herokuapp.com/\"\r\n      \r\n      const response = await fetch(proxyurl+'https://comicvine.gamespot.com/api/issues/?api_key=ddfcbbcf1de93b6a1d5a31436359fa141c71d01c&format=json&sort=date_added:desc&field_list=date_added,image,name,issue_number,volume,id')\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        dispatch(getComicsSuccess(data.results))\r\n      } else {\r\n        throw new Error('Something went wrong');\r\n      }\r\n    } catch (error) {\r\n      console.log(error.message)\r\n      dispatch(getComicsFailure())\r\n    }\r\n  }\r\n}","import React  from 'react';\r\nimport { useSelector } from 'react-redux'\r\nimport styled from 'styled-components';\r\nimport { comicsSelector  } from '../../slices/comics'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction GridDisplay(props) {\r\n    const result = useSelector(comicsSelector)\r\n    const comics = result.comics\r\n\r\n    return (\r\n        <Container>\r\n            <Grid>\r\n                <Row>\r\n                    {comics.map(comic =>\r\n                            <Col to={'/comic/'+comic.id}  key={comic.id} size={2}>\r\n                                <Img src={comic.image.original_url} alt={comic.volume.name} />\r\n                                <ComicInfo>\r\n                                    <strong>{comic.volume.name} {comic.issue_number.match(/^[0-9]+$/) != null?'#'+comic.issue_number:comic.issue_number}</strong>\r\n                                    <DateText>{comic.date_added}</DateText>\r\n                                </ComicInfo>\r\n                            </Col>\r\n                        )\r\n                    }\r\n                </Row>\r\n            </Grid>\r\n\r\n            \r\n            \r\n        </Container>\r\n    );\r\n}\r\n\r\nconst Container = styled.div`\r\n\r\n    width:100%;\r\n    padding-top:1em;\r\n`\r\n\r\nconst ComicInfo = styled.div`\r\n    display:flex;\r\n    flex:1;\r\n    flex-direction:column;\r\n    justify-content:flex-end;\r\n    margin-top:1em;\r\n`\r\n\r\nconst DateText = styled.p`\r\n    margin-top:0;\r\n    color:grey;\r\n    font-weight:bold;\r\n    font-size:0.8em;\r\n`\r\n\r\nconst Img = styled.img`\r\n    width:60%;\r\n    border: 2px solid black;\r\n    align-self:center;\r\n    box-shadow:1px;\r\n`\r\n\r\nconst Grid = styled.div`\r\n    display:flex;\r\n    flex:1;\r\n    flex-direction:column;\r\n    justify-content:center;\r\n    align-items:center;\r\n`;\r\n\r\nconst Row = styled.div`\r\n    display:grid;\r\n    grid-template-columns: 25% 25% 25% 25%;\r\n\r\n    width:80%;\r\n\r\n    @media only screen and (max-width: 1024px) and (min-width: 481px)  {\r\n        grid-template-columns: 33% 33% 33%;\r\n    }\r\n        \r\n    @media only screen and (max-width: 480px)  {\r\n    grid-template-columns: 50% 50%;.\r\n    }\r\n        \r\n`\r\n\r\nconst Col = styled(Link)`\r\n    display: flex;\r\n    flex-direction:column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: relative;\r\n    margin-top: 1em;\r\n    margin-bottom:1em;\r\n    \r\n    text-align: center;\r\n    &:focus, &:hover, &:visited, &:link, &:active {\r\n        text-decoration: none;\r\n        color:black;\r\n    };\r\n    &:hover{\r\n        background-color:#a3f090;\r\n        color:#0f3d04;\r\n    }\r\n    `;\r\n\r\nexport default GridDisplay;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux'\r\nimport styled from 'styled-components';\r\nimport { comicsSelector } from '../../slices/comics'\r\nimport { Link } from \"react-router-dom\";\r\nimport Moment from 'react-moment';\r\n\r\nfunction ListDisplay(props) {\r\n    \r\n    const result = useSelector(comicsSelector)\r\n    const comics = result.comics\r\n\r\n    return (\r\n        <Container>\r\n            <Grid expand=\"xs\" >\r\n                {comics.map(comic =>\r\n                    <Row to={'/comic/'+comic.id} key={comic.id}>\r\n                        <Col size={2}>\r\n                            <Img src={comic.image.original_url} alt={comic.volume.name} />\r\n                        </Col>\r\n                        <Col size={3}>\r\n                            \r\n                            <ComicInfo>\r\n                                <strong>{comic.volume.name} {comic.issue_number.match(/^[0-9]+$/) != null?'#'+comic.issue_number:comic.issue_number}</strong>\r\n                                <DateText>\r\n                                    <Moment format=\"MMM DD, YYYY\">{comic.date_added}</Moment>\r\n                                </DateText>\r\n                            </ComicInfo>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n                    )\r\n                }\r\n            </Grid>\r\n\r\n            \r\n            \r\n        </Container>\r\n    );\r\n}\r\n\r\nconst Container = styled.div`\r\n    display:flex;\r\n    flex-direction:column;\r\n    align-items:center;\r\n    width:100%;\r\n    padding:1em;\r\n`\r\n\r\nconst ComicInfo = styled.div`\r\n    display:flex;\r\n    flex-direction:column;\r\n    align-items:center;\r\n`\r\n\r\nconst DateText = styled.span`\r\n    color:grey;\r\n    font-weight:bold;\r\n    font-size:0.8em;\r\n`\r\n\r\nconst Img = styled.img`\r\n    width:65%;\r\n    border: 2px solid black;\r\n`\r\n\r\nexport const Grid = styled.div`\r\n    width:60%;\r\n    ${ (props) => props.expand && media[props.expand](`\r\n\t\twidth: 80%;\r\n    `)};\r\n`;\r\n\r\nexport const Row = styled(Link)`\r\n    display:flex;\r\n    justify-content:center;\r\n    border-bottom: 2px solid #E2E2E2;\r\n    padding-top: 1em;\r\n    padding-bottom: 1em;\r\n\r\n    &:focus, &:hover, &:visited, &:link, &:active {\r\n        text-decoration: none;\r\n        color:black;\r\n    };\r\n    &:hover{\r\n        background-color:#a3f090;\r\n        color:#0f3d04;\r\n    }\r\n`\r\n\r\nconst media = {\r\n\txs: (styles) => `\r\n\t\t@media only screen and (max-width: 480px){\r\n\t\t\t${styles}\r\n\t\t}\r\n\t`\r\n}\r\n\r\nexport const Col = styled.div`\r\n\tflex: ${(props)=>props.size};\r\n\t${ (props) => props.collapse && media[props.collapse](`\r\n\t\tdisplay: none;\r\n    `)};\r\n    align-items: center;\r\n    justify-content: center;\r\n    width:100%;\r\n    margin:0px;\r\n`;\r\n\r\nexport default ListDisplay;\r\n","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faList, faTh, faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport GridDisplay from './GridDisplay';\r\nimport ListDisplay from './ListDisplay'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { fetchComics, comicsSelector } from '../../slices/comics'\r\n\r\nfunction Container() {\r\n  const [typeOfView, setTypeOfView] = React.useState('list')\r\n\r\n  const handleIconColor = (typeOfComponent) => {\r\n    if(typeOfView===typeOfComponent){\r\n      return 'green'\r\n    }\r\n    else if(typeOfView!==typeOfComponent){\r\n      return 'black'\r\n    }\r\n  }\r\n\r\n//  fetching data with redux\r\n  const dispatch = useDispatch()\r\n  const { comics, loading, hasErrors } = useSelector(comicsSelector)\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchComics())\r\n  }, [dispatch])\r\n\r\n// comics state\r\n\r\n  const renderComics = () => {\r\n      if (loading) return(\r\n        <LoadingComponent>\r\n          <FontAwesomeIcon icon={faSpinner} size=\"3x\" spin color={'green'} />\r\n          <p>Loading comics...</p>\r\n        </LoadingComponent>\r\n      )\r\n      if (hasErrors) return <LoadingComponent>Network error, cannot display comics.</LoadingComponent>\r\n\r\n      return typeOfView === 'list'? <ListDisplay comics={comics} />:<GridDisplay />\r\n        \r\n\r\n  }\r\n\r\n  return (\r\n    <ContainerView>\r\n      <Header>\r\n        <Title> ComicBook </Title>\r\n        <Menu>\r\n            <b>Latest Issues</b>\r\n            <DisplayType>\r\n                <List onClick={ () => setTypeOfView('list')}>\r\n                  <FontAwesomeIcon icon={faList} color={handleIconColor('list')} />\r\n                  <SpanText active={(typeOfView===('list')?true:false)} > List </SpanText>\r\n                </List>\r\n\r\n                <Grid onClick={ () => setTypeOfView('grid')}>\r\n                  <FontAwesomeIcon icon={faTh} color={handleIconColor('grid')} />\r\n                  <SpanText active={(typeOfView===('grid')?true:false)} > Grid </SpanText>\r\n                </Grid>\r\n            </DisplayType>\r\n\r\n        </Menu>\r\n        \r\n      </Header>\r\n\r\n            {renderComics()}\r\n    </ContainerView>\r\n    );\r\n}\r\n\r\nconst ContainerView = styled.div`\r\n  background-color:#F2F2F2;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  overflow-x:hidden;\r\n  `\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width:100vw;\r\n`\r\n\r\nconst Title = styled.h1`\r\n  display: flex;\r\n  font-weight: bold;\r\n  flex: 1;\r\n  margin:0px;\r\n  padding:30px;\r\n`\r\n\r\nconst Menu = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: row;\r\n  justify-content:space-between;\r\n  width:80vw;\r\n  margin:0px;\r\n  border-top: 3px solid #E2E2E2;\r\n  border-bottom: 3px solid #E2E2E2;\r\n`\r\n\r\nconst DisplayType= styled.div`\r\n  width:8em;\r\n  display:flex;\r\n`\r\nconst List = styled.div`\r\n  padding-left:0.5em;\r\n  padding-right:0.5em;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nconst Grid = styled.div`\r\n  padding-left:0.5em;\r\n  padding-right:0.5em;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nconst SpanText = styled.span`\r\n\r\n\r\n  ${({ active }) => active && `\r\n  color green;\r\n  `}\r\n  }\r\n`\r\n\r\nconst LoadingComponent = styled.div`\r\n  display:flex;\r\n  flex:1;\r\n  flex-direction:column;\r\n  justify-content:center;\r\n  align-items:center;\r\n  padding-top: 5em;\r\n`\r\n\r\nexport default Container;\r\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport const initialState = {\r\n  loading: false,\r\n  hasErrors: false,\r\n  comic: [],\r\n  characters: [],\r\n  teams:[],\r\n  locations:[],\r\n  concepts:[]\r\n}\r\n\r\n// A slice for comics with our three reducers\r\nconst comicSlice = createSlice({\r\n  name: 'comic',\r\n  initialState,\r\n  reducers: {\r\n    getComic: state => {\r\n      state.loading = true\r\n    },\r\n    getComicSuccess: (state, { payload }) => {\r\n      state.comic = payload\r\n      state.loading = false\r\n      state.hasErrors = false\r\n    },\r\n    getComicFailure: state => {\r\n      state.loading = false\r\n      state.hasErrors = true\r\n    },\r\n    setCharacters: (state, { payload }) => {\r\n        state.characters = payload\r\n    },\r\n    setTeams: (state, { payload }) => {\r\n        state.teams = payload\r\n    },\r\n    setLocations: (state, { payload }) => {\r\n        state.locations = payload\r\n    },\r\n    setConcepts: (state, { payload }) => {\r\n        state.concepts = payload\r\n    }\r\n  },\r\n})\r\n\r\n// Three actions generated from the slice\r\nexport const { getComic, getComicSuccess, getComicFailure, setCharacters, setTeams, setLocations, setConcepts } = comicSlice.actions\r\n\r\n// A selector\r\n\r\nexport const comicSelector = state => state.comic\r\n\r\n// The reducer\r\nexport default comicSlice.reducer\r\n\r\n// Asynchronous thunk action defined by the first argument\r\n\r\nexport function fetchComic(issue_number) {\r\n  return async dispatch => {\r\n    dispatch(getComic())\r\n    try {\r\n        //const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n        //const proxyurl = \"https://whispering-peak-56582.herokuapp.com/\";\r\n        const proxyurl = \"https://lit-badlands-08756.herokuapp.com/\"\r\n        const response = await fetch(proxyurl+`https://comicvine.gamespot.com/api/issue/4000-${issue_number}/?api_key=ddfcbbcf1de93b6a1d5a31436359fa141c71d01c&format=json&field_list=image,character_credits,team_credits,location_credits,concept_credits`)\r\n        const data = await response.json();\r\n        dispatch(getComicSuccess(data.results))\r\n\r\n        const mapCredits = (myArray) => {\r\n            const promises = myArray.map(async (myValue) => {\r\n                const resValue = await fetch(proxyurl+`${myValue.api_detail_url}?api_key=ddfcbbcf1de93b6a1d5a31436359fa141c71d01c&format=json&field_list=image,name`)\r\n                const dataFromArray = await resValue.json();\r\n                return dataFromArray.results\r\n            });\r\n\r\n            return Promise.all(promises);\r\n        }\r\n\r\n        await mapCredits(data.results.character_credits)\r\n                                .then(characters=> dispatch(setCharacters(characters)))\r\n\r\n        await mapCredits(data.results.team_credits)\r\n                                .then(teams=> dispatch(setTeams(teams)))\r\n\r\n        await mapCredits(data.results.location_credits)\r\n            .then(locations=> dispatch(setLocations(locations)))\r\n\r\n        await mapCredits(data.results.concept_credits)\r\n            .then(concepts=> dispatch(setConcepts(concepts)))\r\n        \r\n    } catch (error) {\r\n      dispatch(getComicFailure())\r\n    }\r\n  }\r\n}","import React from 'react';\r\nimport { comicSelector } from '../../slices/comic'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction ComicDetail() {\r\n    const { comic, loading, hasErrors, characters, teams, locations, concepts} = useSelector(comicSelector)\r\n     \r\n    const renderComic = () => {\r\n        if (loading) return(\r\n        <LoadingComponent>\r\n            <FontAwesomeIcon icon={faSpinner} size=\"3x\" spin color={'green'} />\r\n            <p>Loading comic</p>\r\n        </LoadingComponent>\r\n        )\r\n        if (hasErrors) return <p>Cannot display comic...</p>\r\n\r\n        return (\r\n            <Grid>\r\n                <Row>\r\n                    \r\n                    <Details>\r\n                        <DetailTitle>Characters</DetailTitle>\r\n                        <ItemWrapper>\r\n                        {characters.length!==0 && characters.map((character,index) =>\r\n                            <Col key={character.name+index} size={2}>\r\n                                <ImgTiny src={character.image.tiny_url} alt={character.name} />\r\n                            <span>{character.name}</span>\r\n                            </Col>\r\n                        )}\r\n                        </ItemWrapper>\r\n                        \r\n                        <DetailTitle>Teams</DetailTitle>\r\n                        {teams.length!==0 && teams.map((team,index) =>\r\n                            <Col key={team.name+index} size={2}>\r\n                                <ImgTiny src={team.image.tiny_url} alt={team.name} />\r\n                            <span>{team.name}</span>\r\n                            </Col>\r\n                        )}\r\n                        <DetailTitle>Locations</DetailTitle>\r\n                        {locations.length!==0 && locations.map((location,index) =>\r\n                            <Col key={location.name+index} size={2}>\r\n                                \r\n                                <ImgTiny src={location.image.tiny_url} alt={location.name} />\r\n                                <span>{location.name}</span>\r\n                            </Col>\r\n                        )}\r\n                        <DetailTitle>Concepts</DetailTitle>\r\n                        {concepts.length!==0 && concepts.map((concept,index) =>\r\n                            <Col key={concept.name+index} size={2}>\r\n                                <ImgTiny src={concept.image.tiny_url} alt={concept.name} />\r\n                            <span>{concept.name}</span>\r\n                            </Col>\r\n                        )}\r\n\r\n                    </Details>\r\n\r\n                    <Cover>                    \r\n                        {comic.image && <ImgWrapper><Img src={comic.image.original_url} alt={comic.name} /></ImgWrapper>}\r\n                    </Cover>\r\n                    \r\n                </Row>\r\n            </Grid>\r\n            )\r\n        }\r\n\r\n\r\n    return (\r\n        <>\r\n            {renderComic()}\r\n        </>\r\n        )\r\n}\r\n\r\nconst LoadingComponent = styled.div`\r\n  display:flex;\r\n  flex:1;\r\n  flex-direction:column;\r\n  justify-content:center;\r\n  align-items:center;\r\n  padding-top: 5em;\r\n`\r\nconst ImgWrapper = styled.div`\r\n    position: absolute;\r\n    height: 100%;\r\n    top: 10vh;\r\n    right: 0%;\r\n    @media only screen and (max-width: 480px)  {\r\n        position: relative;\r\n        top:0%;\r\n        left:auto;\r\n        display:flex;\r\n        flex:1;\r\n        justify-content:center;\r\n    }\r\n`\r\n\r\nconst Img = styled.img`\r\n    width:40vw;\r\n    align-self:center;\r\n    right:0;\r\n    @media only screen and (max-width: 480px)  {\r\n        width:60vw;\r\n    }\r\n`\r\n\r\nconst ImgTiny = styled.img`\r\n    border-radius:3px;\r\n    margin:5px;\r\n`\r\n\r\nconst DetailTitle = styled.h2`\r\n    border-bottom: 3px solid #E0E0E0\r\n`\r\n\r\nconst Details = styled.div`\r\n    @media only screen and (max-width: 480px)  {\r\n        order:2;\r\n    }\r\n`\r\nconst Cover = styled.div`\r\n    width:100%;\r\n    @media only screen and (max-width: 480px)  {\r\n        order:1;\r\n    }\r\n`\r\n\r\nconst Grid = styled.div`\r\n    display:flex;\r\n    flex:1;\r\n    flex-direction:column;\r\n    justify-content:center;\r\n    align-items:center;\r\n    width:100%;\r\n`;\r\n\r\nconst Row = styled.div`\r\n    display:grid;\r\n    grid-template-columns: 60% 40%;\r\n\r\n    width:80%;\r\n\r\n    @media only screen and (max-width: 1024px) and (min-width: 481px)  {\r\n        grid-template-columns: 60% 40%;\r\n    }\r\n        \r\n    @media only screen and (max-width: 480px)  {\r\n        grid-template-columns: 100%;\r\n    }\r\n            \r\n`\r\n\r\nconst ItemWrapper = styled.div`\r\n    display:grid;\r\n    grid-template-columns: 50% 50%;\r\n`\r\n\r\nconst Col = styled.div`\r\n    display: flex;\r\n    flex-direction:row;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    position: relative;\r\n    color:#677B67;    \r\n    text-align: center;\r\n    &:focus, &:hover, &:visited, &:link, &:active {\r\n        text-decoration: none;\r\n        color:black;\r\n    };\r\n    &:hover{\r\n        background-color:#a3f090;\r\n        color:#0f3d04;\r\n    }\r\n    `;\r\n\r\nexport default ComicDetail;\r\n","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchComic } from '../../slices/comic'\r\nimport { getId } from \"../../helpers/urlUtils\"\r\nimport ComicDetail from './ComicDetail'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Container() {\r\n\r\n    const dispatch = useDispatch()\r\n \r\n  \r\n    useEffect(() => {\r\n        const comicPathId = getId(window.location.pathname)\r\n        dispatch(fetchComic(comicPathId))\r\n    }, [dispatch])\r\n    \r\n  return (\r\n    <ContainerView>\r\n      <Header to={'/'}>\r\n            <Title> ComicBook </Title>\r\n      </Header>\r\n\r\n            <ComicDetail />\r\n    </ContainerView>\r\n    );\r\n}\r\n\r\nconst ContainerView = styled.div`\r\n  background-color:#F2F2F2;\r\n  height: 100vh;\r\n  width: 100%;\r\n  overflow-x:hidden;\r\n  `\r\n\r\nconst Header = styled(Link)`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  &:focus, &:hover, &:visited, &:link, &:active {\r\n    text-decoration: none;\r\n    color:black;\r\n};\r\n`\r\n\r\nconst Title = styled.h1`\r\n    display: flex;\r\n    flex: 1;\r\n    margin:0px;\r\n    padding:30px;\r\n    &:focus, &:hover, &:visited, &:link, &:active {\r\n        text-decoration: none;\r\n    };\r\n`\r\n\r\nexport default Container;\r\n","export const getId = url => {\r\n    return url\r\n      .split(\"/\")\r\n      .filter(el => !!el)\r\n      .pop();\r\n  };\r\n  ","import React from 'react';\r\n//import { Counter } from './features/counter/Counter';\r\n//import HomePage from './components/HomePage';\r\nimport ComicsListContainer from '../features/comicsList/Container'\r\nimport ComicDetail from '../features/comicDetails/Container'\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n  } from \"react-router-dom\";\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Router basename=\"comicbook-app\">\r\n        <div>\r\n          {/* A <Switch> looks through its children <Route>s and\r\n              renders the first one that matches the current URL. */}\r\n          <Switch>\r\n            \r\n            <Route path=\"/comic\">\r\n              <ComicDetail />\r\n            </Route>\r\n              \r\n            <Route path=\"/\">\r\n              <ComicsListContainer />\r\n            </Route>         \r\n              \r\n            \r\n          </Switch>\r\n        </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from 'redux'\r\n\r\nimport comicsReducer from './comics'\r\nimport comicReducer from './comic'\r\n\r\nconst rootReducer = combineReducers({\r\n  comics: comicsReducer,\r\n  comic: comicReducer\r\n})\r\n\r\nexport default rootReducer","import { configureStore } from '@reduxjs/toolkit';\r\nimport rootReducer from '../slices/index';\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport Route from './app/Route'\r\nimport { Provider } from 'react-redux'\r\nimport store from './app/store'\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n        <Route/>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}